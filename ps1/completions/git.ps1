using namespace System.Management.Automation
using namespace System.Management.Automation.Language

Register-ArgumentCompleter -Native -CommandName git -ScriptBlock {
  param([string]$wordToComplete, [CommandAst]$commandAst, [int]$cursorPosition)
  $cursorPosition -= $wordToComplete.Length
  foreach ($key in $commandAst.CommandElements) {
    if ($key.Extent.StartOffset -eq $cursorPosition) {
      break
    }
    $prev = $key
  }

  @(switch ($prev) {
      Default {
        [CompletionResult]::new('add', 'add', [CompletionResultType]::ParameterName, 'Add file contents to the index')
        [CompletionResult]::new('am', 'am', [CompletionResultType]::ParameterName, 'Apply a series of patches from a mailbox')
        [CompletionResult]::new('archive', 'archive', [CompletionResultType]::ParameterName, 'Create an archive of files from a named tree')
        [CompletionResult]::new('bisect', 'bisect', [CompletionResultType]::ParameterName, 'Use binary search to find the commit that introduced a bug')
        [CompletionResult]::new('branch', 'branch', [CompletionResultType]::ParameterName, 'List, create, or delete branches')
        [CompletionResult]::new('bundle', 'bundle', [CompletionResultType]::ParameterName, 'Move objects and refs by archive')
        [CompletionResult]::new('checkout', 'checkout', [CompletionResultType]::ParameterName, 'Switch branches or restore working tree files')
        [CompletionResult]::new('cherry-pick', 'cherry-pick', [CompletionResultType]::ParameterName, 'Apply the changes introduced by some existing commits')
        [CompletionResult]::new('citool', 'citool', [CompletionResultType]::ParameterName, 'Graphical alternative to git-commit')
        [CompletionResult]::new('clean', 'clean', [CompletionResultType]::ParameterName, 'Remove untracked files from the working tree')
        [CompletionResult]::new('clone', 'clone', [CompletionResultType]::ParameterName, 'Clone a repository into a new directory')
        [CompletionResult]::new('commit', 'commit', [CompletionResultType]::ParameterName, 'Record changes to the repository')
        [CompletionResult]::new('describe', 'describe', [CompletionResultType]::ParameterName, 'Give an object a human readable name based on an available ref')
        [CompletionResult]::new('diff', 'diff', [CompletionResultType]::ParameterName, 'Show changes between commits, commit and working tree, etc')
        [CompletionResult]::new('fetch', 'fetch', [CompletionResultType]::ParameterName, 'Download objects and refs from another repository')
        [CompletionResult]::new('format-patch', 'format-patch', [CompletionResultType]::ParameterName, 'Prepare patches for e-mail submission')
        [CompletionResult]::new('gc', 'gc', [CompletionResultType]::ParameterName, 'Cleanup unnecessary files and optimize the local repository')
        [CompletionResult]::new('gitk', 'gitk', [CompletionResultType]::ParameterName, 'The Git repository browser')
        [CompletionResult]::new('grep', 'grep', [CompletionResultType]::ParameterName, 'Print lines matching a pattern')
        [CompletionResult]::new('gui', 'gui', [CompletionResultType]::ParameterName, 'A portable graphical interface to Git')
        [CompletionResult]::new('init', 'init', [CompletionResultType]::ParameterName, 'Create an empty Git repository or reinitialize an existing one')
        [CompletionResult]::new('log', 'log', [CompletionResultType]::ParameterName, 'Show commit logs')
        [CompletionResult]::new('maintenance', 'maintenance', [CompletionResultType]::ParameterName, 'Run tasks to optimize Git repository data')
        [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterName, 'Join two or more development histories together')
        [CompletionResult]::new('mv', 'mv', [CompletionResultType]::ParameterName, 'Move or rename a file, a directory, or a symlink')
        [CompletionResult]::new('notes', 'notes', [CompletionResultType]::ParameterName, 'Add or inspect object notes')
        [CompletionResult]::new('pull', 'pull', [CompletionResultType]::ParameterName, 'Fetch from and integrate with another repository or a local branch')
        [CompletionResult]::new('push', 'push', [CompletionResultType]::ParameterName, 'Update remote refs along with associated objects')
        [CompletionResult]::new('range-diff', 'range-diff', [CompletionResultType]::ParameterName, 'Compare two commit ranges (e.g. two versions of a branch)')
        [CompletionResult]::new('rebase', 'rebase', [CompletionResultType]::ParameterName, 'Reapply commits on top of another base tip')
        [CompletionResult]::new('reset', 'reset', [CompletionResultType]::ParameterName, 'Reset current HEAD to the specified state')
        [CompletionResult]::new('restore', 'restore', [CompletionResultType]::ParameterName, 'Restore working tree files')
        [CompletionResult]::new('revert', 'revert', [CompletionResultType]::ParameterName, 'Revert some existing commits')
        [CompletionResult]::new('rm', 'rm', [CompletionResultType]::ParameterName, 'Remove files from the working tree and from the index')
        [CompletionResult]::new('scalar', 'scalar', [CompletionResultType]::ParameterName, 'A tool for managing large Git repositories')
        [CompletionResult]::new('shortlog', 'shortlog', [CompletionResultType]::ParameterName, "Summarize 'git log' output")
        [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterName, 'Show various types of objects')
        [CompletionResult]::new('sparse-checkout', 'sparse-checkout', [CompletionResultType]::ParameterName, 'Reduce your working tree to a subset of tracked files')
        [CompletionResult]::new('stash', 'stash', [CompletionResultType]::ParameterName, 'Stash the changes in a dirty working directory away')
        [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterName, 'Show the working tree status')
        [CompletionResult]::new('submodule', 'submodule', [CompletionResultType]::ParameterName, 'Initialize, update or inspect submodules')
        [CompletionResult]::new('switch', 'switch', [CompletionResultType]::ParameterName, 'Switch branches')
        [CompletionResult]::new('tag', 'tag', [CompletionResultType]::ParameterName, 'Create, list, delete or verify a tag object signed with GPG')
        [CompletionResult]::new('worktree', 'worktree', [CompletionResultType]::ParameterName, 'Manage multiple working trees')
        [CompletionResult]::new('config', 'config', [CompletionResultType]::ParameterName, 'Get and set repository or global options')
        [CompletionResult]::new('fast-export', 'fast-export', [CompletionResultType]::ParameterName, 'Git data exporter')
        [CompletionResult]::new('fast-import', 'fast-import', [CompletionResultType]::ParameterName, 'Backend for fast Git data importers')
        [CompletionResult]::new('filter-branch', 'filter-branch', [CompletionResultType]::ParameterName, 'Rewrite branches')
        [CompletionResult]::new('mergetool', 'mergetool', [CompletionResultType]::ParameterName, 'Run merge conflict resolution tools to resolve merge conflicts')
        [CompletionResult]::new('pack-refs', 'pack-refs', [CompletionResultType]::ParameterName, 'Pack heads and tags for efficient repository access')
        [CompletionResult]::new('prune', 'prune', [CompletionResultType]::ParameterName, 'Prune all unreachable objects from the object database')
        [CompletionResult]::new('reflog', 'reflog', [CompletionResultType]::ParameterName, 'Manage reflog information')
        [CompletionResult]::new('refs', 'refs', [CompletionResultType]::ParameterName, 'Low-level access to refs')
        [CompletionResult]::new('remote', 'remote', [CompletionResultType]::ParameterName, 'Manage set of tracked repositories')
        [CompletionResult]::new('repack', 'repack', [CompletionResultType]::ParameterName, 'Pack unpacked objects in a repository')
        [CompletionResult]::new('replace', 'replace', [CompletionResultType]::ParameterName, 'Create, list, delete refs to replace objects')
        [CompletionResult]::new('annotate', 'annotate', [CompletionResultType]::ParameterName, 'Annotate file lines with commit information')
        [CompletionResult]::new('blame', 'blame', [CompletionResultType]::ParameterName, 'Show what revision and author last modified each line of a file')
        [CompletionResult]::new('bugreport', 'bugreport', [CompletionResultType]::ParameterName, 'Collect information for user to file a bug report')
        [CompletionResult]::new('count-objects', 'count-objects', [CompletionResultType]::ParameterName, 'Count unpacked number of objects and their disk consumption')
        [CompletionResult]::new('diagnose', 'diagnose', [CompletionResultType]::ParameterName, 'Generate a zip archive of diagnostic information')
        [CompletionResult]::new('difftool', 'difftool', [CompletionResultType]::ParameterName, 'Show changes using common diff tools')
        [CompletionResult]::new('fsck', 'fsck', [CompletionResultType]::ParameterName, 'Verifies the connectivity and validity of the objects in the database')
        [CompletionResult]::new('gitweb', 'gitweb', [CompletionResultType]::ParameterName, 'Git web interface (web frontend to Git repositories)')
        [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterName, 'Display help information about Git')
        [CompletionResult]::new('instaweb', 'instaweb', [CompletionResultType]::ParameterName, 'Instantly browse your working repository in gitweb')
        [CompletionResult]::new('merge-tree', 'merge-tree', [CompletionResultType]::ParameterName, 'Perform merge without touching index or working tree')
        [CompletionResult]::new('rerere', 'rerere', [CompletionResultType]::ParameterName, 'Reuse recorded resolution of conflicted merges')
        [CompletionResult]::new('show-branch', 'show-branch', [CompletionResultType]::ParameterName, 'Show branches and their commits')
        [CompletionResult]::new('verify-commit', 'verify-commit', [CompletionResultType]::ParameterName, 'Check the GPG signature of commits')
        [CompletionResult]::new('verify-tag', 'verify-tag', [CompletionResultType]::ParameterName, 'Check the GPG signature of tags')
        [CompletionResult]::new('version', 'version', [CompletionResultType]::ParameterName, 'Display version information about Git')
        [CompletionResult]::new('whatchanged', 'whatchanged', [CompletionResultType]::ParameterName, 'Show logs with differences each commit introduces')
        [CompletionResult]::new('archimport', 'archimport', [CompletionResultType]::ParameterName, 'Import a GNU Arch repository into Git')
        [CompletionResult]::new('cvsexportcommit', 'cvsexportcommit', [CompletionResultType]::ParameterName, 'Export a single commit to a CVS checkout')
        [CompletionResult]::new('cvsimport', 'cvsimport', [CompletionResultType]::ParameterName, 'Salvage your data out of another SCM people love to hate')
        [CompletionResult]::new('cvsserver', 'cvsserver', [CompletionResultType]::ParameterName, 'A CVS server emulator for Git')
        [CompletionResult]::new('imap-send', 'imap-send', [CompletionResultType]::ParameterName, 'Send a collection of patches from stdin to an IMAP folder')
        [CompletionResult]::new('p4', 'p4', [CompletionResultType]::ParameterName, 'Import from and submit to Perforce repositories')
        [CompletionResult]::new('quiltimport', 'quiltimport', [CompletionResultType]::ParameterName, 'Applies a quilt patchset onto the current branch')
        [CompletionResult]::new('request-pull', 'request-pull', [CompletionResultType]::ParameterName, 'Generates a summary of pending changes')
        [CompletionResult]::new('send-email', 'send-email', [CompletionResultType]::ParameterName, 'Send a collection of patches as emails')
        [CompletionResult]::new('svn', 'svn', [CompletionResultType]::ParameterName, 'Bidirectional operation between a Subversion repository and Git')
        [CompletionResult]::new('apply', 'apply', [CompletionResultType]::ParameterName, 'Apply a patch to files and/or to the index')
        [CompletionResult]::new('checkout-index', 'checkout-index', [CompletionResultType]::ParameterName, 'Copy files from the index to the working tree')
        [CompletionResult]::new('commit-graph', 'commit-graph', [CompletionResultType]::ParameterName, 'Write and verify Git commit-graph files')
        [CompletionResult]::new('commit-tree', 'commit-tree', [CompletionResultType]::ParameterName, 'Create a new commit object')
        [CompletionResult]::new('hash-object', 'hash-object', [CompletionResultType]::ParameterName, 'Compute object ID and optionally create an object from a file')
        [CompletionResult]::new('index-pack', 'index-pack', [CompletionResultType]::ParameterName, 'Build pack index file for an existing packed archive')
        [CompletionResult]::new('merge-file', 'merge-file', [CompletionResultType]::ParameterName, 'Run a three-way file merge')
        [CompletionResult]::new('merge-index', 'merge-index', [CompletionResultType]::ParameterName, 'Run a merge for files needing merging')
        [CompletionResult]::new('mktag', 'mktag', [CompletionResultType]::ParameterName, 'Creates a tag object with extra validation')
        [CompletionResult]::new('mktree', 'mktree', [CompletionResultType]::ParameterName, 'Build a tree-object from ls-tree formatted text')
        [CompletionResult]::new('multi-pack-index', 'multi-pack-index', [CompletionResultType]::ParameterName, 'Write and verify multi-pack-indexes')
        [CompletionResult]::new('pack-objects', 'pack-objects', [CompletionResultType]::ParameterName, 'Create a packed archive of objects')
        [CompletionResult]::new('prune-packed', 'prune-packed', [CompletionResultType]::ParameterName, 'Remove extra objects that are already in pack files')
        [CompletionResult]::new('read-tree', 'read-tree', [CompletionResultType]::ParameterName, 'Reads tree information into the index')
        [CompletionResult]::new('replay', 'replay', [CompletionResultType]::ParameterName, 'EXPERIMENTAL: Replay commits on a new base, works with bare repos too')
        [CompletionResult]::new('symbolic-ref', 'symbolic-ref', [CompletionResultType]::ParameterName, 'Read, modify and delete symbolic refs')
        [CompletionResult]::new('unpack-objects', 'unpack-objects', [CompletionResultType]::ParameterName, 'Unpack objects from a packed archive')
        [CompletionResult]::new('update-index', 'update-index', [CompletionResultType]::ParameterName, 'Register file contents in the working tree to the index')
        [CompletionResult]::new('update-ref', 'update-ref', [CompletionResultType]::ParameterName, 'Update the object name stored in a ref safely')
        [CompletionResult]::new('write-tree', 'write-tree', [CompletionResultType]::ParameterName, 'Create a tree object from the current index')
        [CompletionResult]::new('cat-file', 'cat-file', [CompletionResultType]::ParameterName, 'Provide contents or details of repository objects')
        [CompletionResult]::new('cherry', 'cherry', [CompletionResultType]::ParameterName, 'Find commits yet to be applied to upstream')
        [CompletionResult]::new('diff-files', 'diff-files', [CompletionResultType]::ParameterName, 'Compares files in the working tree and the index')
        [CompletionResult]::new('diff-index', 'diff-index', [CompletionResultType]::ParameterName, 'Compare a tree to the working tree or index')
        [CompletionResult]::new('diff-tree', 'diff-tree', [CompletionResultType]::ParameterName, 'Compares the content and mode of blobs found via two tree objects')
        [CompletionResult]::new('for-each-ref', 'for-each-ref', [CompletionResultType]::ParameterName, 'Output information on each ref')
        [CompletionResult]::new('for-each-repo', 'for-each-repo', [CompletionResultType]::ParameterName, 'Run a Git command on a list of repositories')
        [CompletionResult]::new('get-tar-commit-id', 'get-tar-commit-id', [CompletionResultType]::ParameterName, 'Extract commit ID from an archive created using git-archive')
        [CompletionResult]::new('ls-files', 'ls-files', [CompletionResultType]::ParameterName, 'Show information about files in the index and the working tree')
        [CompletionResult]::new('ls-remote', 'ls-remote', [CompletionResultType]::ParameterName, 'List references in a remote repository')
        [CompletionResult]::new('ls-tree', 'ls-tree', [CompletionResultType]::ParameterName, 'List the contents of a tree object')
        [CompletionResult]::new('merge-base', 'merge-base', [CompletionResultType]::ParameterName, 'Find as good common ancestors as possible for a merge')
        [CompletionResult]::new('name-rev', 'name-rev', [CompletionResultType]::ParameterName, 'Find symbolic names for given revs')
        [CompletionResult]::new('pack-redundant', 'pack-redundant', [CompletionResultType]::ParameterName, 'Find redundant pack files')
        [CompletionResult]::new('rev-list', 'rev-list', [CompletionResultType]::ParameterName, 'Lists commit objects in reverse chronological order')
        [CompletionResult]::new('rev-parse', 'rev-parse', [CompletionResultType]::ParameterName, 'Pick out and massage parameters')
        [CompletionResult]::new('show-index', 'show-index', [CompletionResultType]::ParameterName, 'Show packed archive index')
        [CompletionResult]::new('show-ref', 'show-ref', [CompletionResultType]::ParameterName, 'List references in a local repository')
        [CompletionResult]::new('unpack-file', 'unpack-file', [CompletionResultType]::ParameterName, "Creates a temporary file with a blob's contents")
        [CompletionResult]::new('var', 'var', [CompletionResultType]::ParameterName, 'Show a Git logical variable')
        [CompletionResult]::new('verify-pack', 'verify-pack', [CompletionResultType]::ParameterName, 'Validate packed Git archive files')
        [CompletionResult]::new('daemon', 'daemon', [CompletionResultType]::ParameterName, 'A really simple server for Git repositories')
        [CompletionResult]::new('fetch-pack', 'fetch-pack', [CompletionResultType]::ParameterName, 'Receive missing objects from another repository')
        [CompletionResult]::new('http-backend', 'http-backend', [CompletionResultType]::ParameterName, 'Server side implementation of Git over HTTP')
        [CompletionResult]::new('send-pack', 'send-pack', [CompletionResultType]::ParameterName, 'Push objects over Git protocol to another repository')
        [CompletionResult]::new('update-server-info', 'update-server-info', [CompletionResultType]::ParameterName, 'Update auxiliary info file to help dumb servers')
        [CompletionResult]::new('check-attr', 'check-attr', [CompletionResultType]::ParameterName, 'Display gitattributes information')
        [CompletionResult]::new('check-ignore', 'check-ignore', [CompletionResultType]::ParameterName, 'Debug gitignore / exclude files')
        [CompletionResult]::new('check-mailmap', 'check-mailmap', [CompletionResultType]::ParameterName, 'Show canonical names and email addresses of contacts')
        [CompletionResult]::new('check-ref-format', 'check-ref-format', [CompletionResultType]::ParameterName, 'Ensures that a reference name is well formed')
        [CompletionResult]::new('column', 'column', [CompletionResultType]::ParameterName, 'Display data in columns')
        [CompletionResult]::new('credential', 'credential', [CompletionResultType]::ParameterName, 'Retrieve and store user credentials')
        [CompletionResult]::new('credential-cache', 'credential-cache', [CompletionResultType]::ParameterName, 'Helper to temporarily store passwords in memory')
        [CompletionResult]::new('credential-store', 'credential-store', [CompletionResultType]::ParameterName, 'Helper to store credentials on disk')
        [CompletionResult]::new('fmt-merge-msg', 'fmt-merge-msg', [CompletionResultType]::ParameterName, 'Produce a merge commit message')
        [CompletionResult]::new('hook', 'hook', [CompletionResultType]::ParameterName, 'Run git hooks')
        [CompletionResult]::new('interpret-trailers', 'interpret-trailers', [CompletionResultType]::ParameterName, 'Add or parse structured information in commit messages')
        [CompletionResult]::new('mailinfo', 'mailinfo', [CompletionResultType]::ParameterName, 'Extracts patch and authorship from a single e-mail message')
        [CompletionResult]::new('mailsplit', 'mailsplit', [CompletionResultType]::ParameterName, 'Simple UNIX mbox splitter program')
        [CompletionResult]::new('merge-one-file', 'merge-one-file', [CompletionResultType]::ParameterName, 'The standard helper program to use with git-merge-index')
        [CompletionResult]::new('patch-id', 'patch-id', [CompletionResultType]::ParameterName, 'Compute unique ID for a patch')
        [CompletionResult]::new('sh-i18n', 'sh-i18n', [CompletionResultType]::ParameterName, "Git's i18n setup code for shell scripts")
        [CompletionResult]::new('sh-setup', 'sh-setup', [CompletionResultType]::ParameterName, 'Common Git shell script setup code')
        [CompletionResult]::new('stripspace', 'stripspace', [CompletionResultType]::ParameterName, 'Remove unnecessary whitespace')
        [CompletionResult]::new('attributes', 'attributes', [CompletionResultType]::ParameterName, 'Defining attributes per path')
        [CompletionResult]::new('cli', 'cli', [CompletionResultType]::ParameterName, 'Git command-line interface and conventions')
        [CompletionResult]::new('hooks', 'hooks', [CompletionResultType]::ParameterName, 'Hooks used by Git')
        [CompletionResult]::new('ignore', 'ignore', [CompletionResultType]::ParameterName, 'Specifies intentionally untracked files to ignore')
        [CompletionResult]::new('mailmap', 'mailmap', [CompletionResultType]::ParameterName, 'Map author/committer names and/or E-Mail addresses')
        [CompletionResult]::new('modules', 'modules', [CompletionResultType]::ParameterName, 'Defining submodule properties')
        [CompletionResult]::new('repository-layout', 'repository-layout', [CompletionResultType]::ParameterName, 'Git Repository Layout')
        [CompletionResult]::new('revisions', 'revisions', [CompletionResultType]::ParameterName, 'Specifying revisions and ranges for Git')
        [CompletionResult]::new('format-bundle', 'format-bundle', [CompletionResultType]::ParameterName, 'The bundle file format')
        [CompletionResult]::new('format-chunk', 'format-chunk', [CompletionResultType]::ParameterName, 'Chunk-based file formats')
        [CompletionResult]::new('format-commit-graph', 'format-commit-graph', [CompletionResultType]::ParameterName, 'Git commit-graph format')
        [CompletionResult]::new('format-index', 'format-index', [CompletionResultType]::ParameterName, 'Git index format')
        [CompletionResult]::new('format-pack', 'format-pack', [CompletionResultType]::ParameterName, 'Git pack format')
        [CompletionResult]::new('format-signature', 'format-signature', [CompletionResultType]::ParameterName, 'Git cryptographic signature formats')
        [CompletionResult]::new('protocol-capabilities', 'protocol-capabilities', [CompletionResultType]::ParameterName, 'Protocol v0 and v1 capabilities')
        [CompletionResult]::new('protocol-common', 'protocol-common', [CompletionResultType]::ParameterName, 'Things common to various protocols')
        [CompletionResult]::new('protocol-http', 'protocol-http', [CompletionResultType]::ParameterName, 'Git HTTP-based protocols')
        [CompletionResult]::new('protocol-pack', 'protocol-pack', [CompletionResultType]::ParameterName, 'How packs are transferred over-the-wire')
        [CompletionResult]::new('protocol-v2', 'protocol-v2', [CompletionResultType]::ParameterName, 'Git Wire Protocol, Version 2')
        [CompletionResult]::new('askpass', 'askpass', [CompletionResultType]::ParameterName, '')
        [CompletionResult]::new('askyesno', 'askyesno', [CompletionResultType]::ParameterName, '')
        [CompletionResult]::new('credential-helper-selector', 'credential-helper-selector', [CompletionResultType]::ParameterName, '')
        [CompletionResult]::new('credential-manager', 'credential-manager', [CompletionResultType]::ParameterName, '')
        [CompletionResult]::new('flow', 'flow', [CompletionResultType]::ParameterName, '')
        [CompletionResult]::new('lfs', 'lfs', [CompletionResultType]::ParameterName, '')
        [CompletionResult]::new('update-git-for-windows', 'update-git-for-windows', [CompletionResultType]::ParameterName, '')
      }
    }) | Where-Object ListItemText -Like "$wordToComplete*"
}
